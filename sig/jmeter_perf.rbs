# frozen_string_literal: true

module JmeterPerf
  def self.test: (params: Hash[Symbol, untyped] ?, &block: untyped) -> ExtendedDSL

  class ExtendedDSL < DSL
    include JmeterPerf::Helpers::Parser

    attr_accessor root: ::Nokogiri::XML::Document

    def initialize: (params: Hash[Symbol, untyped] ?) -> void
    def jmx: (out_jmx: String = "ruby-jmeter.jmx") -> void
    def run: (
      name: String = "ruby-jmeter",
      jmeter_path: String = "jmeter",
      out_jmx: String = "ruby-jmeter.jmx",
      out_jtl: String = "jmeter.jtl",
      out_jmeter_log: String = "jmeter.log",
      out_cmd_log: String = "jmeter-cmd.log",
      jtl_read_timeout: Integer = 3
    ) -> JmeterPerf::Report::Summary
  end

  module Report
    class Comparator
      attr_reader cohens_d: Float
      attr_reader t_statistic: Float
      attr_reader human_rating: String
      attr_reader name: String

      def initialize: (base_report: Summary, test_report: Summary, name: String ?) -> void
      def pass?: (cohens_d_limit: Float ?, effect_size: Symbol = :vsmall) -> bool
      def generate_reports: (output_dir: String = ".", output_format: Symbol = :all) -> void
      def to_s: () -> String
      def print_comparison: () -> void
    end
  end

  module Report
    class Summary
      attr_accessor avg: Float
      attr_accessor error_percentage: Float
      attr_accessor max: Integer
      attr_accessor min: Integer
      attr_accessor p10: Float
      attr_accessor p50: Float
      attr_accessor p95: Float
      attr_accessor requests_per_minute: Float
      attr_accessor response_codes: Hash[String, Integer]
      attr_accessor standard_deviation: Float
      attr_accessor total_bytes: Integer
      attr_accessor total_errors: Integer
      attr_accessor total_latency: Integer
      attr_accessor total_requests: Integer
      attr_accessor total_sent_bytes: Integer
      attr_accessor csv_error_lines: Array[Integer]
      attr_accessor total_run_time: Integer
      attr_accessor name: String

      def self.read: (csv_path: String) -> Summary
      def initialize: (file_path: String, name: String ? = nil, jtl_read_timeout: Integer = 3) -> void
      def finish!: () -> void
      def write_csv: (output_file: String) -> void
      def stream_jtl_async: () -> Thread
      def summarize_data!: () -> void
    end
  end
end
