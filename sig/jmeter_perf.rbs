module JmeterPerf
  def self.test: (Hash[Symbol, untyped] params = {}) { () -> void } -> ExtendedDSL
  def self.dsl_eval: (ExtendedDSL, { () -> void }) -> void

  class ExtendedDSL < DSL
    include Parser
    attr_accessor root: Nokogiri::XML::Document

    def initialize: (Hash[Symbol, untyped]) -> void

    def out: () -> void
    def jmx: (out_jmx: String) -> void
    def to_xml: () -> String
    def run: (
      name: String,
      jmeter_path: String?,
      out_jmx: String,
      out_jtl: String,
      out_jmeter_log: String,
      out_cmd_log: String
    ) -> Report::Summary
  end

  module Report
    class Summary
      attr_reader name: String
      attr_reader avg: Float
      attr_reader error_percentage: Float
      attr_reader max: Integer
      attr_reader min: Integer
      attr_reader p10: Float
      attr_reader p50: Float
      attr_reader p95: Float
      attr_reader requests_per_minute: Float
      attr_reader response_codes: Hash[String, Integer]
      attr_reader standard_deviation: Float
      attr_reader total_bytes: Integer
      attr_reader total_elapsed_time: Integer
      attr_reader total_errors: Integer
      attr_reader total_latency: Integer
      attr_reader total_requests: Integer
      attr_reader total_sent_bytes: Integer

      alias rpm: requests_per_minute
      alias std: standard_deviation
      alias median: p50

      def initialize: (String | Pathname, String?) -> void
      def finish!: () -> void
      def stream_jtl_async: () -> Thread
      def summarize_data!: () -> void
    end

    class Comparator
      attr_reader cohens_d: Float
      attr_reader t_statistic: Float
      attr_reader human_rating: String
      attr_reader name: String

      def initialize: (Summary, Summary, String?) -> void
      def pass?: (Float?, Symbol, Symbol) -> bool
      def generate_reports: (output_dir: String, output_format: Symbol) -> void
    end
  end

  class DSLGenerator
    def initialize: (lib_dir: String, gem_dir: String, dsl_dir: String, idl_xml_path: String) -> void
    def generate: () -> void
  end

  class DSL
    def method_missing: (Symbol, *untyped, **untyped) { () -> void } -> void
    def respond_to_missing?: (Symbol, bool) -> bool

    # DSL Methods
    ## AUTOGENERATED - DSL methods RBS

    def test_plan: (Hash[Symbol, untyped], &block) -> void
    def counter: (Hash[Symbol, untyped], &block) -> void
    def csv_data_set_config: (Hash[Symbol, untyped], &block) -> void
    def ftp_request_defaults: (Hash[Symbol, untyped], &block) -> void
    def http_authorization_manager: (Hash[Symbol, untyped], &block) -> void
    def http_cache_manager: (Hash[Symbol, untyped], &block) -> void
    def http_cookie_manager: (Hash[Symbol, untyped], &block) -> void
    def http_header_manager: (Hash[Symbol, untyped], &block) -> void
    def http_request_defaults: (Hash[Symbol, untyped], &block) -> void
    def java_request_defaults: (Hash[Symbol, untyped], &block) -> void
    def jdbc_connection_configuration: (Hash[Symbol, untyped], &block) -> void
    def keystore_configuration: (Hash[Symbol, untyped], &block) -> void
    def ldap_extended_request_defaults: (Hash[Symbol, untyped], &block) -> void
    def ldap_request_defaults: (Hash[Symbol, untyped], &block) -> void
    def login_config_element: (Hash[Symbol, untyped], &block) -> void
    def random_variable: (Hash[Symbol, untyped], &block) -> void
    def simple_config_element: (Hash[Symbol, untyped], &block) -> void
    def tcp_sampler_config: (Hash[Symbol, untyped], &block) -> void
    def user_defined_variables: (Hash[Symbol, untyped], &block) -> void
    def test_fragment: (Hash[Symbol, untyped], &block) -> void
    def thread_group: (Hash[Symbol, untyped], &block) -> void
    def for_each_controller: (Hash[Symbol, untyped], &block) -> void
    def if_controller: (Hash[Symbol, untyped], &block) -> void
    def include_controller: (Hash[Symbol, untyped], &block) -> void
    def loop_controller: (Hash[Symbol, untyped], &block) -> void
    def module_controller: (Hash[Symbol, untyped], &block) -> void
    def once_only_controller: (Hash[Symbol, untyped], &block) -> void
    def random_controller: (Hash[Symbol, untyped], &block) -> void
    def random_order_controller: (Hash[Symbol, untyped], &block) -> void
    def recording_controller: (Hash[Symbol, untyped], &block) -> void
    def runtime_controller: (Hash[Symbol, untyped], &block) -> void
    def simple_controller: (Hash[Symbol, untyped], &block) -> void
    def switch_controller: (Hash[Symbol, untyped], &block) -> void
    def throughput_controller: (Hash[Symbol, untyped], &block) -> void
    def transaction_controller: (Hash[Symbol, untyped], &block) -> void
    def while_controller: (Hash[Symbol, untyped], &block) -> void
    def bean_shell_timer: (Hash[Symbol, untyped], &block) -> void
    def bsf_timer: (Hash[Symbol, untyped], &block) -> void
    def constant_throughput_timer: (Hash[Symbol, untyped], &block) -> void
    def constant_timer: (Hash[Symbol, untyped], &block) -> void
    def gaussian_random_timer: (Hash[Symbol, untyped], &block) -> void
    def jsr223_timer: (Hash[Symbol, untyped], &block) -> void
    def poisson_random_timer: (Hash[Symbol, untyped], &block) -> void
    def synchronizing_timer: (Hash[Symbol, untyped], &block) -> void
    def uniform_random_timer: (Hash[Symbol, untyped], &block) -> void
    def bean_shell_preprocessor: (Hash[Symbol, untyped], &block) -> void
    def bsf_preprocessor: (Hash[Symbol, untyped], &block) -> void
    def html_link_parser: (Hash[Symbol, untyped], &block) -> void
    def html_parameter_mask: (Hash[Symbol, untyped], &block) -> void
    def http_url_rewriting_modifier: (Hash[Symbol, untyped], &block) -> void
    def jdbc_preprocessor: (Hash[Symbol, untyped], &block) -> void
    def jsr223_preprocessor: (Hash[Symbol, untyped], &block) -> void
    def reg_ex_user_parameters: (Hash[Symbol, untyped], &block) -> void
    def user_parameters: (Hash[Symbol, untyped], &block) -> void
    def access_log_sampler: (Hash[Symbol, untyped], &block) -> void
    def ajp13_sampler: (Hash[Symbol, untyped], &block) -> void
    def bean_shell_sampler: (Hash[Symbol, untyped], &block) -> void
    def bsf_sampler: (Hash[Symbol, untyped], &block) -> void
    def debug_sampler: (Hash[Symbol, untyped], &block) -> void
    def ftp_request: (Hash[Symbol, untyped], &block) -> void
    def http_request: (Hash[Symbol, untyped], &block) -> void
    def java_request: (Hash[Symbol, untyped], &block) -> void
    def jdbc_request: (Hash[Symbol, untyped], &block) -> void
    def jms_pointto_point: (Hash[Symbol, untyped], &block) -> void
    def jms_publisher: (Hash[Symbol, untyped], &block) -> void
    def jms_subscriber: (Hash[Symbol, untyped], &block) -> void
    def jsr223_sampler: (Hash[Symbol, untyped], &block) -> void
    def j_unit_request: (Hash[Symbol, untyped], &block) -> void
    def ldap_extended_request: (Hash[Symbol, untyped], &block) -> void
    def ldap_request: (Hash[Symbol, untyped], &block) -> void
    def mail_reader_sampler: (Hash[Symbol, untyped], &block) -> void
    def os_process_sampler: (Hash[Symbol, untyped], &block) -> void
    def smtp_sampler: (Hash[Symbol, untyped], &block) -> void
    def soap_xml_rpc_request: (Hash[Symbol, untyped], &block) -> void
    def tcp_sampler: (Hash[Symbol, untyped], &block) -> void
    def test_action: (Hash[Symbol, untyped], &block) -> void
    def bean_shell_postprocessor: (Hash[Symbol, untyped], &block) -> void
    def bsf_postprocessor: (Hash[Symbol, untyped], &block) -> void
    def css_jquery_extractor: (Hash[Symbol, untyped], &block) -> void
    def debug_postprocessor: (Hash[Symbol, untyped], &block) -> void
    def jdbc_postprocessor: (Hash[Symbol, untyped], &block) -> void
    def json_path_postprocessor: (Hash[Symbol, untyped], &block) -> void
    def jsr223_postprocessor: (Hash[Symbol, untyped], &block) -> void
    def regular_expression_extractor: (Hash[Symbol, untyped], &block) -> void
    def result_status_action_handler: (Hash[Symbol, untyped], &block) -> void
    def x_path_extractor: (Hash[Symbol, untyped], &block) -> void
    def bean_shell_assertion: (Hash[Symbol, untyped], &block) -> void
    def bsf_assertion: (Hash[Symbol, untyped], &block) -> void
    def compare_assertion: (Hash[Symbol, untyped], &block) -> void
    def duration_assertion: (Hash[Symbol, untyped], &block) -> void
    def html_assertion: (Hash[Symbol, untyped], &block) -> void
    def jsr223_assertion: (Hash[Symbol, untyped], &block) -> void
    def md5_hex_assertion: (Hash[Symbol, untyped], &block) -> void
    def response_assertion: (Hash[Symbol, untyped], &block) -> void
    def smime_assertion: (Hash[Symbol, untyped], &block) -> void
    def xml_assertion: (Hash[Symbol, untyped], &block) -> void
    def xml_schema_assertion: (Hash[Symbol, untyped], &block) -> void
    def x_path_assertion: (Hash[Symbol, untyped], &block) -> void
    def aggregate_graph: (Hash[Symbol, untyped], &block) -> void
    def aggregate_report: (Hash[Symbol, untyped], &block) -> void
    def assertion_results: (Hash[Symbol, untyped], &block) -> void
    def bean_shell_listener: (Hash[Symbol, untyped], &block) -> void
    def bsf_listener: (Hash[Symbol, untyped], &block) -> void
    def comparison_assertion_visualizer: (Hash[Symbol, untyped], &block) -> void
    def distribution_graphalpha: (Hash[Symbol, untyped], &block) -> void
    def generate_summary_results: (Hash[Symbol, untyped], &block) -> void
    def graph_results: (Hash[Symbol, untyped], &block) -> void
    def jsr223_listener: (Hash[Symbol, untyped], &block) -> void
    def mailer_visualizer: (Hash[Symbol, untyped], &block) -> void
    def monitor_results: (Hash[Symbol, untyped], &block) -> void
    def response_time_graph: (Hash[Symbol, untyped], &block) -> void
    def save_responses_to_a_file: (Hash[Symbol, untyped], &block) -> void
    def simple_data_writer: (Hash[Symbol, untyped], &block) -> void
    def spline_visualizer: (Hash[Symbol, untyped], &block) -> void
    def summary_report: (Hash[Symbol, untyped], &block) -> void
    def view_results_in_table: (Hash[Symbol, untyped], &block) -> void
    def view_results_tree: (Hash[Symbol, untyped], &block) -> void

    ## AUTOGENERATED - DSL methods RBS
  end
end
